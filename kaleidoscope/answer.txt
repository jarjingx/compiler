词法分析：
	Q：解释函数 gettok() 如何向调用者传递 token 类别、token 语义值（数字值、变量名）
	A：token共有6类取值代表6种类别：-1(eof)、-2(def)、-3(extern)、-4(identifier)、-5(number)、[0...255](others)
	  gettok()通过函数的返回值传递token的类别，通过static变量NumVal传递数字值，通过static变量IdentifierStr传递变量名


语法分析和AST的构建
	Q：解释 ExprAST 里的 virtual 的作用，在继承时的原理（解释 vtable)
	A：virtual 申明了该析构函数基类希望派生类能重新定义，如若派生类定义了析构函数，将覆盖基类的析构函数，否则，将使用基类的析构函数


	Q：解释代码里的 <std::unique_ptr> 和为什么要使用它？
	A：std::unique_ptr<CertainType>定义了指向AST中特定类型结点的指针，通过指针为媒介，才能将结点信息完整地在函数调用中进行传递，从而正确构建AST


	Q：阅读 src/toy.cpp 中的 MainLoop 及其调用的函数. 阅读 HandleDefinition 和 HandleTopLevelExpression ，忽略 Codegen 部分，说明两者对应的 AST 结构.
	A：HandleDefinition 产生结构：FunctionAST( PrototypeAST, ExprAST( ) )，其中 ExprAST 具有不确定的子结构
	  HandleTopLevelExpression 产生结构：FunctionAST( PrototypeAST, ExprAST( ) )，其中 ExprAST 具有不确定的子结构
	  区别在于：后者结构中的 PrototypeAST 是人为添加上去的，使得任何一个表达式均为一个匿名函数


	Q：Kaleidoscope 如何在 Lexer 和 Parser 间传递信息？（token、语义值、用什么函数和变量）
	A：Parser通过调用Lexer提供的gettok()函数，从函数的返回值中获取token
	  若token为-4(identifier)，则其语义值存放于static变量NumVal
	  若token为-5(number)，则其语义值存放于static变量IdentifierStr


	Q：Kaleidoscope 如何处理算符优先级（重点解释 ParseBinOpRHS ）？解释a*b*c、a*b+c、a+b*c分别是如何被分析处理的？
	A：所有双目运算符的优先级存放于数组 BinopPrecedence[] 中，通过调用函数 GetTokPrecedence() 返回当前 token 的优先级
	  函数 ParseBinOpRHS() 分析得到应该处于当前双目运算符右子树中的结构
	  其每次比较当前运算符与下一个运算符，若当前运算符优先级更高，则将下一个操作数作为其右子树，否则，将已处理部分的优先级置为当前算符优先级+1，然后递归调用剩余部分

	  a*b*c 分析出的结构为 *( *( a, b ), c )
	  a*b+c 分析出的结构为 +( *( a, b ), c )
	  a+b*c 分析出的结构为 +( a, *( b, c ) )


	Q：解释 Error、ErrorP、ErrorF 的作用，举例说明它们在语法分析中的应用。
	A：Error 处理除了函数原型以外的错误信息的输出
		e.g：1、在括号表达式中，左括号无相应的右括号匹配，通过 Error 输出 "expected ')'"
		    2、在函数调用的参数表中，参数后面缺乏右括号或者逗号，通过 Error 输出 "Expected ')' or ',' in argument list"
		    3、在表达式的识别中，出现未知的token，通过 Error 输出 "unknown token when expecting an expression"
	  ErrorP 处理在函数原型中遇到的错误信息的输出
		e.g：1、函数原型的第一个 token 不是 identifier 时，即函数名称缺失，通过 ErrorP 输出 "Expected function name in prototype"
		    2、函数名称后紧跟的 token 不为左括号时，即左括号缺失，通过 ErrorP 输出 "Expected '(' in prototype"
		    3、函数的参数列表结束后紧跟的 token 不为右括号时，即右括号缺失，通过 ErrorP 输出 "Expected ')' in prototype"
	  ErrorF 并没有找到哪里有这个函数……


	Q：Kaleidoscope 不支持声明变量和给变量赋值，那么变量的作用是什么？
	A：作为形式参数，使得函数可以接受实际参数，增强了函数的功能


中间代码生成：
    	Q：解释教程 3.2 节中 Module、IRBuilder<> 的作用。
	A：TheModule 是 LLVM 中的一个结构，它容纳函数和全局变量，同时也是 LLVM 中间表示用来容纳代码的顶层结构
	   IRBuilder 的实例可以跟踪当前的位置，从而进行指令的插入与创建，它提供了一种指令生成的黑箱，使得我们可以不用考虑指令生成的具体位置，而只用关注指令本身的信息

    	Q：为何使用常量时用的函数名都是 get 而不是 create ？
	A：因为常量是共享的，只需要读取便可，不需要创建一个新的副本来存储它

    	Q：简要说明声明和定义一个函数的过程。
	A：声明函数：获取一个标识符作为函数原型的名称，再获取该名称后的若干标识符作为函数原型的形式参数，之后确定形式参数与函数的类型，最后结合函数的类型、函数名称、外部链接、新插入的模块，构建函数原型
	   定义函数：先检查函数声明的代码是否生成，若未生成的话则调用以上的过程生成函数的声明代码，在确保已正确生成了函数声明的代码后，创建一个基本块，然后在符号表中添加参数声明，之后在函数块结尾插入表达式，最后，对函数进行一致性检查。
    
	Q：文中提到了 visitor pattern, 虽然这里没有用到, 但是是一个很重要的设计模式, 请调研后给出解释( 字数不作限制)。
	A：设计者模式( visitor pattern )是在面向对象的程序设计和软件开发中使用的一种方法，它可以将一个算法从它操作的一个对象的结构中剥离出来，从而允许了在不修改现有对象的结构下扩展其操作。
	   这种方法主要适用于数据结构相对稳定而算法十分多元的系统中，它将有关行为集中到一个访问者对象中，而不影响系统数据结构。
	   比如需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而又想避免让这些操作影响这些对象的类，此时可以用访问者模式将相关的操作集中起来定义在一个类中。
