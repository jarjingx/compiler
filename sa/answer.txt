3.1
	test.c			源代码
	AST.svg			根据源代码产生的抽象语法树，描述源代码的语法结构
	CFG.svg			根据源代码产生的控制流程图，描述程序的运行逻辑，其结点仅区分不同程序点
	ExplodedGraph.svg	根据源代码产生的执行路径追踪图（扩展的控制流程图），同一程序点的不同状态也将被区分为不同结点

3.2
	1. Checker 在分析程序时需要记录程序状态，故是在CFG上进行的
	2. 保存在 GenericDataMap
	3. int x = 3, y = 4
	   	创建 $0 保存 x 的地址，创建 $1 保存 x 的值，绑定地址 $0 到值 $1 的映射
		创建 $2 保存 3，执行赋值 $1 <- $2
		创建 $3 保存 y 的地址，创建 $4 保存 y 的值，绑定地址 $3 到值 $4 的映射
		创建 $5 保存 4，执行赋值 $4 <- $5
	   int *p = &x
		创建 $6 保存 p 的地址，创建 $7 保存 p 的值，绑定地址 $6 到值 $7 的映射
		创建 $8 保存单元 *p 的值，绑定地址 $7 到值 $8 的映射
		执行赋值 $8 <- $0
	   int z = *( p + 1 )
		创建 $9 保存 z 的地址，创建 $10 保存 z 的值，绑定地址 $9 到值 $10 的映射
		创建 $11 保存 1，创建 $12 保存 p + 1 的值，执行赋值 $12 <- $7 + $11
		创建 $13 保存 *( p + 1) 的值，执行赋值 $13 <- *( $12 )
		执行赋值 $10 <- $13

3.3
	1. 指针特点：	scoped_ptr	不允许传递指针
	   		auto_ptr	允许指针传递，即发生赋值时，原对象的指针会转移给新对象，原对象的指针变为 NULL
	   		unique_ptr	具有对对象的独有权，两个 unique_ptr 不能指向同一个对象，也不能进行复制或值传递等操作
	   		shared_ptr	允许多个 shared_ptr 指向同一个对象，且会记录有多少个 shared_ptr 指向这一对象
	   使用场合：	为了防止在指针所指向的对象使用完毕后忘记 delete 而造成内存泄露，在各个场合都可以将普通指针包装成智能指针
			具体智能指针的选择，根据其特点考虑，使用最符合需要的智能指针	
	2. 因为 C++ 的 RTTI 具有一些缺点，主要在于它只能工作在具有 v-table 的类上
	   LLVM 使用了 isa<>, cast<>, dyn_cast<>, cast_or_null<>, dyn_cast_or_null<> 这五个与 C++ 中 dynamic_cast<> 运算符类似的模板扩展了 RTTI 的功能
	3. 应申明为 ArrayRef 类型
	   应申明为 StringRef 类型
	4. 匿名命名空间使得其内名称的作用域被限制在当前文件中，无法通过在另外的文件中使用 extern 来链接，实现对文件外的隐藏，能起到 static 的效果
	   而考虑到 static 不可对 class 进行限定，且 static 还有静态变量申明的作用，使得用在不同地方的 static 具有不同的含义，容易混淆
	   综上，可以使用匿名命名空间来更好地取代 static 的功能

3.4
	1. 对于每个流对象保存了状态 Kind { Opened, Closed },保存在 StreamMap 中，最终写入在 ProgramState 中
	2. 状态在 CheckPreCall() 和 CheckPostCall() 时发生变化
	3. 在 checkPreCall() 和 isLeaked() 中进行了状态检查
	4. (1) 当发现指针逃逸时，检测外部调用是否能够关闭文件，若其不能关闭文件，则保持对符号的追踪，否则，将所有逃逸的符号从 StreamMap 中删除
	   (2) 实现了更加精准的错误报告，即在外部调用可以关闭文件时，不发出错误报告
	   (3) 用在符号逃逸时
	5. (1) 该 checker 能识别：文件打开失败，文件关闭失败，文件多次关闭，文件意外关闭，指针逃逸，符号泄露
	   (2) 未对文件权限进行检查
	   (3)  ----------------------------------------------------------------------------------------------------------------------
		以下为一个多次关闭文件的源代码：
		----------------------------------------------------------------------------------------------------------------------
		#include<stdio.h>

		FILE *open( char *file )
		{
			return fopen( file, "r" );
		}

		void f1( FILE *f )
		{
			fclose( f );
		}

		void f2( FILE *f )
		{
			fclose( f );
		}

		int main( )
		{
			FILE *f = open( "foo" );
			f1( f );
			f2( f );
			return 0;
		}
		----------------------------------------------------------------------------------------------------------------------
		以下为 SimpleStream 检查器对该代码作出的反馈：
		----------------------------------------------------------------------------------------------------------------------
		jarjingx@jarjingx-PC:~/PB14011026/sa$ clang --analyze -Xanalyzer -analyzer-checker=alpha.unix.SimpleStream filetest.c
		filetest.c:15:2: warning: Closing a previously closed file stream
        		fclose( f );
        		^~~~~~~~~~~
			1 warning generated.
		jarjingx@jarjingx-PC:~/PB14011026/sa$
		----------------------------------------------------------------------------------------------------------------------

3.5
	1. (1) 增加 checker 源代码 xxxChecker.cpp 于 lib/StaticAnalyzer/Checkers
	   (2) 修改 implementation file, lib/StaticAnalyzer/Checkers/Checkers.td, lib/StaticAnalyzer/Checkers/CMakeLists.txt
	2. clang_tablegen 函数驱动对 Checkers.td 文件的解析
	3. (1) 后缀名 .td 标识 TableGen 文件类型，此类文件定义了一套数据结构和语法规范，用来帮助开发与维护某些相关的信息记录
	   (2) 编译时，会自动调用 TableGen 工具解析 .td 文件，然后按照文件内的一些规范与定义产生 C++ 头文件或源文件
	   (3) 用 TableGen 来描述信息记录，可以减少大量的重复工作，且能减少编码错误出现的几率
	
